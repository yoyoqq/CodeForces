#include <iostream>
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define nl '\n'

void solve(){
    ll n, x; cin >> n >> x;
    // vector<int> a(n+1);
    map<int, int> a;
    for (int i=0, k; i<n; i++){
        cin >> k;
        a[k]++;
    }
    // find max mex
    for (int i=0; i<=n; i++){
        // not found 
        if (a[i] == 0){
            cout << i << nl;
            return;
        }
        a[i]--;
        // increase count of i + xAccepted
        ll bum = i + x;
        a[bum] += a[i];
    }
    
    
    // USING AN ARRAY TO STORE THEM IS MORE EFFICIENT (FROM EDITORIAL)
    // int n, x; cin >> n >> x;
    // // limited to mx = n 
    // priority_queue<int, vector<int>, greater<int>> pq;  // min q
    // int in = 0;
    // for (int i=0; i<n; i++){
    //     cin >> in;
    //     pq.push(in);
    // }

    // int cur_mex = 0;
    // while (pq.size()){
    //     // cout << pq.top() << " ";
    //     // found num poss 
    //     if (pq.top() == cur_mex){
    //         pq.pop();
    //         cur_mex++;
    //     }
    //     // smaller num 
    //     else if (pq.top() < cur_mex){
    //         int tp = pq.top(); pq.pop();
    //         pq.push(tp + x);
    //     }
    //     // not found 
    //     else{
    //         break;
    //     }
    // }
    // cout << nl;
    // cout << cur_mex << nl;
    
    // to n 
    // for (int i=0; i<n; i++){
    //     // possible
    //     if (pq.top() < i){
    //     break;    // take one 
    //         pq.pop();
    //         // rest increase by k     
    //         while (pq.top() < i){
    //             int tp = pq.top(); pq.pop();
    //             pq.push(tp + x);
    //         }
    //     }
    //     // else cout 
    //     break;else{
    //         cout << i << nl;
    //         return;
    //     }
    // }
    // cout << n << nl;
}

int main(){
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    int test; cin >> test;
    while(test--) solve();
    return 0;
}

